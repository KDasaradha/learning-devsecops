version: '3.8'
services:
  user_service:
    build:
      context: ../../
      dockerfile: services/user_service/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@db:5432/dbname}
      - KAFKA_BROKER=${KAFKA_BROKER:-kafka:9092}
    ports:
      - "8001:8000"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  task_service:
    build:
      context: ../../
      dockerfile: services/task_service/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@db:5432/dbname}
      - KAFKA_BROKER=${KAFKA_BROKER:-kafka:9092}
    ports:
      - "8002:8000"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user_service:
        condition: service_started
    restart: unless-stopped

  notification_service:
    build:
      context: ../../
      dockerfile: services/notification_service/Dockerfile
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER:-kafka:9092}
    ports:
      - "8003:8000"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dbname"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: kong:3.6
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: info
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ../../api_gateway/kong/kong.yml:/kong/declarative/kong.yml:ro
    ports:
      - "8000:8000"
      - "8444:8001"
    depends_on:
      - user_service
      - task_service

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Kafka Management UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - zookeeper

  # ZooKeeper Management UI  
  zoonavigator:
    image: elkozmon/zoonavigator:latest
    ports:
      - "9000:9000"
    environment:
      HTTP_PORT: 9000
    depends_on:
      - zookeeper

  # Kong Manager (Admin UI)
  konga:
    image: pantsel/konga:latest
    ports:
      - "1337:1337"
    environment:
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
    depends_on:
      - kong

volumes:
  pgdata:
  pgadmin_data:
  zookeeper_data:
  kafka_data: